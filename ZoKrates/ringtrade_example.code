import "./decodeOrder.code"
import "./limitLessThanPrice.code"

def tupleForTokensWithValue(value):
  return value, value, value

def tupleForTokenPairsWithValue(value):
  return value, value, value, value, value, value

def findPairInTokenPairList(pairToken0Token1, pairToken0Token2, pairToken1Token0, pairToken1Token2, pairToken2Token0, pairToken2Token1, sourceToken, targetToken):
  pair = 0
  pair = if sourceToken == 0 then if targetToken == 1 then pairToken0Token1 else pair fi else pair fi
  pair = if sourceToken == 0 then if targetToken == 2 then pairToken0Token2 else pair fi else pair fi
  pair = if sourceToken == 1 then if targetToken == 0 then pairToken1Token0 else pair fi else pair fi
  pair = if sourceToken == 1 then if targetToken == 2 then pairToken1Token2 else pair fi else pair fi
  pair = if sourceToken == 2 then if targetToken == 0 then pairToken2Token0 else pair fi else pair fi
  pair = if sourceToken == 2 then if targetToken == 1 then pairToken2Token1 else pair fi else pair fi
  return pair

def lookupPrice(sourceToken, priceToken1, priceToken2):
  price = if sourceToken == 0 then 1000000000000000000 else 0 fi
  price = price + if sourceToken == 1 then priceToken1 else 0 fi
  price = price + if sourceToken == 2 then priceToken2 else 0 fi
  return price

def addVolumesForOrder(volumeToken1, volumeToken2, volumeToken3, token, volume):
  txVolumeToken1 = volumeToken1 + if token == 0 then volume else 0 fi
  txVolumeToken2 = volumeToken2 + if token == 1 then volume else 0 fi
  txVolumeToken3 = volumeToken3 + if token == 2 then volume else 0 fi
  return txVolumeToken1, txVolumeToken2, txVolumeToken3

def updateHighestTouchedOrder(highestTouchedOrderToken0Token1, highestTouchedOrderToken0Token2, highestTouchedOrderToken1Token0, highestTouchedOrderToken1Token2, highestTouchedOrderToken2Token0, highestTouchedOrderToken2Token1, sourceToken, targetToken, limit, volume):

  highestTouchedOrder = findPairInTokenPairList(highestTouchedOrderToken0Token1, highestTouchedOrderToken0Token2, highestTouchedOrderToken1Token0, highestTouchedOrderToken1Token2, highestTouchedOrderToken2Token0, highestTouchedOrderToken2Token1, sourceToken, targetToken)

  shouldUpdate = if 0 < volume then 1 else 0 fi
  shouldUpdate = if highestTouchedOrder < limit then shouldUpdate else 0 fi

  highestTouchedOrderToken0Token1 = if shouldUpdate == 1 then if sourceToken == 0 then if targetToken == 1 then limit else highestTouchedOrderToken0Token1 fi else highestTouchedOrderToken0Token1 fi else highestTouchedOrderToken0Token1 fi
  highestTouchedOrderToken0Token2 = if shouldUpdate == 1 then if sourceToken == 0 then if targetToken == 2 then limit else highestTouchedOrderToken0Token2 fi else highestTouchedOrderToken0Token2 fi else highestTouchedOrderToken0Token2 fi
  highestTouchedOrderToken1Token0 = if shouldUpdate == 1 then if sourceToken == 1 then if targetToken == 0 then limit else highestTouchedOrderToken1Token0 fi else highestTouchedOrderToken1Token0 fi else highestTouchedOrderToken1Token0 fi
  highestTouchedOrderToken1Token2 = if shouldUpdate == 1 then if sourceToken == 1 then if targetToken == 2 then limit else highestTouchedOrderToken1Token2 fi else highestTouchedOrderToken1Token2 fi else highestTouchedOrderToken1Token2 fi
  highestTouchedOrderToken2Token0 = if shouldUpdate == 1 then if sourceToken == 2 then if targetToken == 0 then limit else highestTouchedOrderToken2Token0 fi else highestTouchedOrderToken2Token0 fi else highestTouchedOrderToken2Token0 fi
  highestTouchedOrderToken2Token1 = if shouldUpdate == 1 then if sourceToken == 2 then if targetToken == 1 then limit else highestTouchedOrderToken2Token1 fi else highestTouchedOrderToken2Token1 fi else highestTouchedOrderToken2Token1 fi

  return highestTouchedOrderToken0Token1, highestTouchedOrderToken0Token2, highestTouchedOrderToken1Token0, highestTouchedOrderToken1Token2, highestTouchedOrderToken2Token0, highestTouchedOrderToken2Token1

def verifyCompletelyFulfilledIfLimitLowerHighestTouchedOrder(highestTouchedOrderToken0Token1, highestTouchedOrderToken0Token2, highestTouchedOrderToken1Token0, highestTouchedOrderToken1Token2, highestTouchedOrderToken2Token0, highestTouchedOrderToken2Token1, sourceAmount, sourceToken, targetToken, limit, volume):

  highestTouchedOrder = findPairInTokenPairList(highestTouchedOrderToken0Token1, highestTouchedOrderToken0Token2, highestTouchedOrderToken1Token0, highestTouchedOrderToken1Token2, highestTouchedOrderToken2Token0, highestTouchedOrderToken2Token1, sourceToken, targetToken)

  valid = if limit < highestTouchedOrder then 1 - (sourceAmount - volume) else 1 fi
  return valid

def checkConstraints(amount1, sourceToken1, targetToken1, limit1, amount2, sourceToken2, targetToken2, limit2, amount3, sourceToken3, targetToken3, limit3, volume1, volume2, volume3, priceToken1, priceToken2):
  // volumes are not larger than in original offer
  validVolumesLowerAmount1 = if amount1 < volume1 then 0 else 1 fi
  validVolumesLowerAmount1 == 1
  validVolumesLowerAmount2 = if amount2 < volume2 then 0 else 1 fi
  validVolumesLowerAmount2 == 1
  validVolumesLowerAmount3 = if amount3 < volume3 then 0 else 1 fi
  validVolumesLowerAmount3 == 1

  sourceTokenPriceOrder1 = lookupPrice(sourceToken1, priceToken1, priceToken2)
  targetTokenPriceOrder1 = lookupPrice(targetToken1, priceToken1, priceToken2)
  sourceTokenPriceOrder2 = lookupPrice(sourceToken2, priceToken1, priceToken2)
  targetTokenPriceOrder2 = lookupPrice(targetToken2, priceToken1, priceToken2)
  sourceTokenPriceOrder3 = lookupPrice(sourceToken3, priceToken1, priceToken2)
  targetTokenPriceOrder3 = lookupPrice(targetToken3, priceToken1, priceToken2)

  // orders are only touched, if the limit price is below the calculated price:
  validLimitLessThanPrice1 = if volume1 == 0 then 1 else limitLessThanPrice(sourceTokenPriceOrder1, targetTokenPriceOrder1, limit1) fi
  validLimitLessThanPrice1 == 1
  validLimitLessThanPrice2 = if volume2 == 0 then 1 else limitLessThanPrice(sourceTokenPriceOrder2, targetTokenPriceOrder2, limit2) fi
  validLimitLessThanPrice2 == 1
  validLimitLessThanPrice3 = if volume3 == 0 then 1 else limitLessThanPrice(sourceTokenPriceOrder3, targetTokenPriceOrder3, limit3) fi
  validLimitLessThanPrice3 == 1

  // the amount of sell volume for a token equals its buy volume:
  buyVolumeToken1, buyVolumeToken2, buyVolumeToken3 = tupleForTokensWithValue(0)
  sellVolumeToken1, sellVolumeToken2, sellVolumeToken3 = tupleForTokensWithValue(0)

  buyVolumeToken1, buyVolumeToken2, buyVolumeToken3 = addVolumesForOrder(buyVolumeToken1, buyVolumeToken2, buyVolumeToken3, targetToken1, volume1 * sourceTokenPriceOrder1)
  sellVolumeToken1, sellVolumeToken2, sellVolumeToken3 = addVolumesForOrder(sellVolumeToken1, sellVolumeToken2, sellVolumeToken3, sourceToken1, volume1 * sourceTokenPriceOrder1)

  buyVolumeToken1, buyVolumeToken2, buyVolumeToken3 = addVolumesForOrder(buyVolumeToken1, buyVolumeToken2, buyVolumeToken3, targetToken2, volume2 * sourceTokenPriceOrder2)
  sellVolumeToken1, sellVolumeToken2, sellVolumeToken3 = addVolumesForOrder(sellVolumeToken1, sellVolumeToken2, sellVolumeToken3, sourceToken2, volume2 * sourceTokenPriceOrder2)

  buyVolumeToken1, buyVolumeToken2, buyVolumeToken3 = addVolumesForOrder(buyVolumeToken1, buyVolumeToken2, buyVolumeToken3, targetToken3, volume3 * sourceTokenPriceOrder3)
  sellVolumeToken1, sellVolumeToken2, sellVolumeToken3 = addVolumesForOrder(sellVolumeToken1, sellVolumeToken2, sellVolumeToken3, sourceToken3, volume3 * sourceTokenPriceOrder3)

  buyVolumeToken1 == sellVolumeToken1
  buyVolumeToken2 == sellVolumeToken2
  buyVolumeToken3 == sellVolumeToken3

  // If an order σ ∈ Oi→j with a limit price p has a positive trading volume, then every order in Oi→j with a lower limit price should be completely fulfilled.
  highestTouchedOrderToken0Token1, highestTouchedOrderToken0Token2, highestTouchedOrderToken1Token0, highestTouchedOrderToken1Token2, highestTouchedOrderToken2Token0, highestTouchedOrderToken2Token1 = tupleForTokenPairsWithValue(0)
  highestTouchedOrderToken0Token1, highestTouchedOrderToken0Token2, highestTouchedOrderToken1Token0, highestTouchedOrderToken1Token2, highestTouchedOrderToken2Token0, highestTouchedOrderToken2Token1 = updateHighestTouchedOrder(highestTouchedOrderToken0Token1, highestTouchedOrderToken0Token2, highestTouchedOrderToken1Token0, highestTouchedOrderToken1Token2, highestTouchedOrderToken2Token0, highestTouchedOrderToken2Token1, sourceToken1, targetToken1, limit1, volume1)
  highestTouchedOrderToken0Token1, highestTouchedOrderToken0Token2, highestTouchedOrderToken1Token0, highestTouchedOrderToken1Token2, highestTouchedOrderToken2Token0, highestTouchedOrderToken2Token1 = updateHighestTouchedOrder(highestTouchedOrderToken0Token1, highestTouchedOrderToken0Token2, highestTouchedOrderToken1Token0, highestTouchedOrderToken1Token2, highestTouchedOrderToken2Token0, highestTouchedOrderToken2Token1, sourceToken2, targetToken2, limit2, volume2)
  highestTouchedOrderToken0Token1, highestTouchedOrderToken0Token2, highestTouchedOrderToken1Token0, highestTouchedOrderToken1Token2, highestTouchedOrderToken2Token0, highestTouchedOrderToken2Token1 = updateHighestTouchedOrder(highestTouchedOrderToken0Token1, highestTouchedOrderToken0Token2, highestTouchedOrderToken1Token0, highestTouchedOrderToken1Token2, highestTouchedOrderToken2Token0, highestTouchedOrderToken2Token1, sourceToken3, targetToken3, limit3, volume3)

  valid = verifyCompletelyFulfilledIfLimitLowerHighestTouchedOrder(highestTouchedOrderToken0Token1, highestTouchedOrderToken0Token2, highestTouchedOrderToken1Token0, highestTouchedOrderToken1Token2, highestTouchedOrderToken2Token0, highestTouchedOrderToken2Token1, amount1, sourceToken1, targetToken1, limit1, volume1)
  valid == 1
  valid = verifyCompletelyFulfilledIfLimitLowerHighestTouchedOrder(highestTouchedOrderToken0Token1, highestTouchedOrderToken0Token2, highestTouchedOrderToken1Token0, highestTouchedOrderToken1Token2, highestTouchedOrderToken2Token0, highestTouchedOrderToken2Token1, amount2, sourceToken2, targetToken2, limit2, volume2)
  valid == 1
  valid = verifyCompletelyFulfilledIfLimitLowerHighestTouchedOrder(highestTouchedOrderToken0Token1, highestTouchedOrderToken0Token2, highestTouchedOrderToken1Token0, highestTouchedOrderToken1Token2, highestTouchedOrderToken2Token0, highestTouchedOrderToken2Token1, amount3, sourceToken3, targetToken3, limit3, volume3)
  valid == 1

  return 1 // Could return total volume to maximize for

def main(private encodedOrder1, private encodedOrder2, private encodedOrder3, private bitmapOrder1, private bitmapOrder2, private bitmapOrder3, private volume1, private volume2, private volume3, private priceToken1, private priceToken2):
  // Remove orders that are not double signed
  encodedOrder1 = if bitmapOrder1 == 1 then encodedOrder1 else 0 fi
  encodedOrder2 = if bitmapOrder2 == 1 then encodedOrder2 else 0 fi
  encodedOrder3 = if bitmapOrder3 == 1 then encodedOrder3 else 0 fi

  // Decode orders
  amount1, sourceToken1, targetToken1, limit1 = decodeOrder(encodedOrder1)
  amount2, sourceToken2, targetToken2, limit2 = decodeOrder(encodedOrder2)
  amount3, sourceToken3, targetToken3, limit3 = decodeOrder(encodedOrder3)

  return checkConstraints(amount1, sourceToken1, targetToken1, limit1, amount2, sourceToken2, targetToken2, limit2, amount3, sourceToken3, targetToken3, limit3, volume1, volume2, volume3, priceToken1, priceToken2)