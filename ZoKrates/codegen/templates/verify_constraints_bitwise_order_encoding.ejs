import "./decodeOrderBitwise.code"
import "./limitLessThanPrice.code"

<% const volumes = generateVariableNames('volume', orders) -%>
<% const prices = generateVariableNames('priceToken', tokens-1) -%>
<% const decodedOrderTuples = generateDecodedOrderTuples(orders) -%>
<%_ include partials/check_constraints.ejs %>

<% const bitwiseOrders = generateBitwiseVariables('order', 253, orders) -%>
<% const bitmap = generateVariableNames('bitmapOrder', orders) -%>
def main(private <%- bitwiseOrders.join(", private ") %>, private <%- bitmap.join(", private ") %>, private <%- volumes.join(", private ") %>, private <%- prices.join(", private ") %>):
  // Decode orders
  <%_ for(var i=0; i < bitmap.length; i++) { _%>
  <%= decodedOrderTuples[i] %> = decodeOrderBitwise(<%= bitwiseOrders.slice(i*253, (i+1)*253).join(", ") %>)
  <%_ } _%>

  // check double signatures
  <%_ for(var i=0; i < bitmap.length; i++) { _%>
    <%_ let orderParts = decodedOrderTuples[i].split(", ") _%>
    <%_ for(var part=0; part < orderParts.length; part++) { _%>
  <%= orderParts[part] %> = if <%= bitmap[i] %> == 1 then <%= orderParts[part] %> else 0 fi
    <%_ } _%>  

  <%_ } _%>
  return checkConstraints(<%- decodedOrderTuples.join(", ") %>, <%- volumes.join(", ") %>, <%- prices.join(", ") %>)