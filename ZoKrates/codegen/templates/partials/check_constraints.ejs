def tupleForTokensWithValue(value):
  return <%= generateVariableNames('', tokens).map(function(i) {return 'value'}).join(', ') %>

def tupleForTokenPairsWithValue(value):
  return <%= generateTokenPairs('', tokens).map(function(i) {return 'value'}).join(', ') %>

<% const pairs = generateTokenPairs('pair', tokens) -%>
def findPairInTokenPairList(<%= pairs.map(function(pair) {return pair.name}).join(', ') %>, sourceToken, targetToken):
  pair = 0
  <%_ for(var i=0; i < pairs.length; i++) { _%>
  <%_ let pair = pairs[i]; _%>
  pair = if sourceToken == <%= pair.source %> then if targetToken == <%= pair.target %> then <%= pair.name %> else pair fi else pair fi
  <%_ } _%>
  return pair

def lookupPrice(sourceToken, <%- prices.join(", ") %>):
  price = if sourceToken == 0 then 1000000000000000000 else 0 fi
  <%_ for(var i=0; i < prices.length; i++) { _%>
  price = price + if sourceToken == <%= i+1 %> then <%= prices[i] %> else 0 fi
  <%_ } _%>
  return price

<% const updatedVolumeToken = generateVariableNames('txVolumeToken', tokens) -%>
<% const volumeToken = generateVariableNames('volumeToken', tokens) -%>
def addVolumesForOrder(<%- volumeToken.join(", ") %>, token, volume):
  <%_ for(var i=0; i < updatedVolumeToken.length; i++) { _%>
  <%= updatedVolumeToken[i] %> = <%= volumeToken[i] %> + if token == <%= i %> then volume else 0 fi
  <%_ } _%>
  return <%- updatedVolumeToken.join(", ") %>

<% const highestTouchedOrderPairs = generateTokenPairs('highestTouchedOrder', tokens) -%>
<% const highestTouchedOrderPairsArgument = highestTouchedOrderPairs.map(function(pair) {return pair.name}).join(', ') -%>
def updateHighestTouchedOrder(<%= highestTouchedOrderPairsArgument %>, sourceToken, targetToken, limit, volume):

  highestTouchedOrder = findPairInTokenPairList(<%= highestTouchedOrderPairsArgument %>, sourceToken, targetToken)

  shouldUpdate = if 0 < volume then 1 else 0 fi
  shouldUpdate = if highestTouchedOrder < limit then shouldUpdate else 0 fi

  <%_ for(var i=0; i < highestTouchedOrderPairs.length; i++) { _%>
  <%_ let pair = highestTouchedOrderPairs[i]; _%>
  <%= pair.name %> = if shouldUpdate == 1 then if sourceToken == <%= pair.source %> then if targetToken == <%= pair.target %> then limit else <%= pair.name %> fi else <%= pair.name %> fi else <%= pair.name %> fi
  <%_ } _%>

  return <%= highestTouchedOrderPairsArgument %>

def verifyCompletelyFulfilledIfLimitLowerHighestTouchedOrder(<%= highestTouchedOrderPairsArgument %>, sourceAmount, sourceToken, targetToken, limit, volume):

  highestTouchedOrder = findPairInTokenPairList(<%= highestTouchedOrderPairsArgument %>, sourceToken, targetToken)

  valid = if limit < highestTouchedOrder then 1 - (sourceAmount - volume) else 1 fi
  return valid

def checkConstraints(<%- decodedOrderTuples.join(", ") %>, <%- volumes.join(", ") %>, <%- prices.join(", ") %>):
  // volumes are not larger than in original offer
  <%_ for(var i=0; i < volumes.length; i++) { _%>
  validVolumesLowerAmount<%- i+1 %> = if <%- decodedOrderTuples[i].split(", ")[0] %> < <%- volumes[i] %> then 0 else 1 fi
  validVolumesLowerAmount<%- i+1 %> == 1
  <%_ } _%>

  <%_ const sourceTokenPrices = generateVariableNames('sourceTokenPriceOrder', orders) _%>
  <%_ const targetTokenPrices = generateVariableNames('targetTokenPriceOrder', orders) _%>
  <%_ for(var i=0; i < volumes.length; i++) { _%>
  <%= sourceTokenPrices[i] %> = lookupPrice(<%- decodedOrderTuples[i].split(", ")[1] %>, <%-  prices.join(', ') _%>)
  <%= targetTokenPrices[i] %> = lookupPrice(<%- decodedOrderTuples[i].split(", ")[2] %>, <%- prices.join(', ') _%>)
  <%_ } _%>

  // orders are only touched, if the limit price is below the calculated price:
  <%_ for(var i=0; i < volumes.length; i++) { _%>
  validLimitLessThanPrice<%- i+1 %> = if <%- volumes[i] %> == 0 then 1 else limitLessThanPrice(<%- sourceTokenPrices[i] %>, <%- targetTokenPrices[i] %>, <%- decodedOrderTuples[i].split(", ").slice(3).join(', ') %>) fi
  validLimitLessThanPrice<%- i+1 %> == 1
  <%_ } _%>

  // the amount of sell volume for a token equals its buy volume:
  <%_ const buyVolumeToken = generateVariableNames('buyVolumeToken', tokens) _%>
  <%_ const sellVolumeToken = generateVariableNames('sellVolumeToken', tokens) _%>
  <%= buyVolumeToken.join(', ') %> = tupleForTokensWithValue(0)
  <%= sellVolumeToken.join(', ') %> = tupleForTokensWithValue(0)
  <%_ for(var i=0; i < volumes.length; i++) { %>
  <%_ let orderParts = decodedOrderTuples[i].split(", ") _%>
  <%= buyVolumeToken.join(', ') %> = addVolumesForOrder(<%= buyVolumeToken.join(', ') %>, <%= orderParts[2] %>, <%= volumes[i] %> * <%= sourceTokenPrices[i] %>)
  <%= sellVolumeToken.join(', ') %> = addVolumesForOrder(<%= sellVolumeToken.join(', ') %>, <%= orderParts[1] %>, <%= volumes[i] %> * <%= sourceTokenPrices[i] %>)
  <%_ } _%>

  <%_ for(var i=0; i < buyVolumeToken.length; i++) { _%>
  <%= buyVolumeToken[i] %> == <%= sellVolumeToken[i] %>
  <%_ } _%>

  // If an order σ ∈ Oi→j with a limit price p has a positive trading volume, then every order in Oi→j with a lower limit price should be completely fulfilled.
  <%= highestTouchedOrderPairsArgument %> = tupleForTokenPairsWithValue(0)
  <%_ for(var i=0; i < decodedOrderTuples.length; i++) { _%>
  <%_ let orderParts = decodedOrderTuples[i].split(", ") _%>
  <%= highestTouchedOrderPairsArgument  %> = updateHighestTouchedOrder(<%= highestTouchedOrderPairsArgument %>, <%= orderParts[1] %>, <%= orderParts[2] %>, <%= orderParts[3] %>, <%= volumes[i] %>)
  <%_ } _%>

  <%_ for(var i=0; i < decodedOrderTuples.length; i++) { _%>
  valid = verifyCompletelyFulfilledIfLimitLowerHighestTouchedOrder(<%= highestTouchedOrderPairsArgument %>, <%= decodedOrderTuples[i] %>, <%= volumes[i] %>)
  valid == 1
  <%_ } _%>

  return 1 // Could return total volume to maximize for